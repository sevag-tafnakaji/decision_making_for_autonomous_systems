// Generated by gencpp from file world_percept_assig/UpdateObjectListRequest.msg
// DO NOT EDIT!


#ifndef WORLD_PERCEPT_ASSIG_MESSAGE_UPDATEOBJECTLISTREQUEST_H
#define WORLD_PERCEPT_ASSIG_MESSAGE_UPDATEOBJECTLISTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace world_percept_assig
{
template <class ContainerAllocator>
struct UpdateObjectListRequest_
{
  typedef UpdateObjectListRequest_<ContainerAllocator> Type;

  UpdateObjectListRequest_()
    : object_pose()
    , object_name()  {
    }
  UpdateObjectListRequest_(const ContainerAllocator& _alloc)
    : object_pose(_alloc)
    , object_name(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _object_pose_type;
  _object_pose_type object_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_name_type;
  _object_name_type object_name;





  typedef boost::shared_ptr< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateObjectListRequest_

typedef ::world_percept_assig::UpdateObjectListRequest_<std::allocator<void> > UpdateObjectListRequest;

typedef boost::shared_ptr< ::world_percept_assig::UpdateObjectListRequest > UpdateObjectListRequestPtr;
typedef boost::shared_ptr< ::world_percept_assig::UpdateObjectListRequest const> UpdateObjectListRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator1> & lhs, const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator2> & rhs)
{
  return lhs.object_pose == rhs.object_pose &&
    lhs.object_name == rhs.object_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator1> & lhs, const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace world_percept_assig

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "222d5a82080ff468b2e6652bcf649b40";
  }

  static const char* value(const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x222d5a82080ff468ULL;
  static const uint64_t static_value2 = 0xb2e6652bcf649b40ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_percept_assig/UpdateObjectListRequest";
  }

  static const char* value(const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# New Object for the list\n"
"geometry_msgs/Pose object_pose\n"
"string object_name\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_pose);
      stream.next(m.object_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateObjectListRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_percept_assig::UpdateObjectListRequest_<ContainerAllocator>& v)
  {
    s << indent << "object_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.object_pose);
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_PERCEPT_ASSIG_MESSAGE_UPDATEOBJECTLISTREQUEST_H
